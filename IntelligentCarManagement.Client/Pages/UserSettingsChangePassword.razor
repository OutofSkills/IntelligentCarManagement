@using IntelligentCarManagement.Client.Services

@if (ResetPasswordModel is null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <EditForm Model="ResetPasswordModel" OnValidSubmit="HandleSubmit">

        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (successStatus)
        {
            <div class="alert alert-success">
                <span>@message</span>
            </div>
        }
        @if (failStatus)
        {
            <div class="alert alert-danger">
                <span>@message</span>
            </div>
        }

        <InputText class="form-control" @bind-Value="@ResetPasswordModel.Email" hidden></InputText>
        <div class="form-group">
            <label class="form-label">Current password</label>
            <InputText type="password" class="form-control" @bind-Value="@ResetPasswordModel.CurrentPassword"></InputText>
            <ValidationMessage For="@(() => ResetPasswordModel.CurrentPassword)" />
        </div>

        <div class="form-group">
            <label class="form-label">New password</label>
            <InputText type="password" class="form-control" @bind-Value="@ResetPasswordModel.Password"></InputText>
            <ValidationMessage For="@(() => ResetPasswordModel.Password)" />
        </div>

        <div class="form-group">
            <label class="form-label">Repeat new password</label>
            <InputText type="password" class="form-control" @bind-Value="@ResetPasswordModel.ConfirmPassword"></InputText>
            <ValidationMessage For="@(() => ResetPasswordModel.ConfirmPassword)" />
        </div>

        <div class="text-end mt-3">
            <button type="submit" class="btn btn-primary">Save changes</button>&nbsp;
            <button type="button" class="btn btn-default">Cancel</button>
        </div>
    </EditForm>
}

@code {
    [Inject]
    public IAuthenticationService AuthService { get; set; }
    [Parameter]
    public ResetPasswordModel ResetPasswordModel { get; set; }
    private bool successStatus = false;
    private string message;
    private bool failStatus = false;

    private async Task HandleSubmit()
    {
        var status = await AuthService.ChangePasswordAsync(ResetPasswordModel);

        if (status)
        {
            successStatus = true;
            failStatus = false;

            message = "Changes saved successfully.";
        }
        else
        {
            failStatus = true;
            successStatus = false;

            message = "Something went wrong.";
        }
    }
}
