@page "/login"

@using IntelligentCarManagement.Models
@using IntelligentCarManagement.Authentication
@using Services;

@inject IAuthenticationService AuthService
@inject NavigationManager NavManager

<h3>Login</h3>

@if (showAuthentificationError)
{
    <div class="alert alert-danger" role="alert">
        <p>@authentificationErrorText</p>
    </div>
}

<EditForm Model="@user" OnValidSubmit="ExecuteLogin" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
        <ValidationSummary />

    <div class="form-group row">
        <label for="email" class="col-md-2 col-form-label">Email:</label>
        <div class="col-md-10">
            <InputText id="email" class="form-control" @bind-Value="user.Email"></InputText>
            <ValidationMessage For="@(() => user.Email)" />
        </div>
    </div>

    <div class="form-group row mt-2">
        <label for="password" class="col-md-2 col-form-label">Password:</label>
        <div class="col-md-10">
            <InputText id="password" class="form-control" @bind-Value="user.Password"></InputText>
            <ValidationMessage For="@(() => user.Password)" />
        </div>
    </div>

    <div class="form-group row mt-2">
        <div class="col-md-12 text-end">
            <button type="submit" class="btn btn-success">Log in</button>
        </div>
    </div>
</EditForm>


@code {
    private LoginModel user = new LoginModel();
    private bool showAuthentificationError = false;
    private string authentificationErrorText = "";

    private async Task ExecuteLogin()
    {
        showAuthentificationError = false;

        var result = await AuthService.Login(user);

        if (result is not null)
        {
            NavManager.NavigateTo("/");
        }
        else
        {
            authentificationErrorText = "There was an error when trying to log in. ";
            showAuthentificationError = true;
        }

    }
}
