@using IntelligentCarManagement.Client.Services

@if (User is null || User.Address is null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div> 
}
else
{
    <EditForm Model="User" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

         @if(successStatus)
          {
            <div class="alert alert-success">
                <span>@successMessage</span>
            </div>
          }

        <InputText class="form-control" @bind-Value="User.Password" hidden></InputText>
        <InputText class="form-control" @bind-Value="User.ConfirmPassword" hidden></InputText>

        <div class="card-body pb-2">
            <div class="form-group">
                <label class="form-label">Age</label>
                <InputNumber class="form-control" @bind-Value="User.Age"></InputNumber>
                <ValidationMessage For="@(() => User.Age)" />
            </div>
            <div class="form-group">
                <div class="row g-3">
                    <div class="col-md-4">
                        <label class="form-label">County</label>
                        <InputText class="form-control" @bind-Value="User.Address.County"></InputText>
                        <ValidationMessage For="@(() => User.Address.County)" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">City</label>
                        <InputText class="form-control" @bind-Value="User.Address.City"></InputText>
                        <ValidationMessage For="@(() => User.Address.City)" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Street</label>
                        <InputText class="form-control" @bind-Value="User.Address.Street"></InputText>
                        <ValidationMessage For="@(() => User.Address.Street)" />
                    </div>
                </div>
            </div>


        </div>
        <hr class="border-light m-0">
        <div class="card-body pb-2">

            <h6 class="mb-4">Contacts</h6>
            <div class="form-group">
                <label class="form-label">Phone</label>
                <InputText type="text" class="form-control" @bind-Value="User.PhoneNumber"></InputText>
                <ValidationMessage For="@(() => User.PhoneNumber)" />
            </div>
        </div>

        <div class="text-end mt-3">
            <button type="submit" class="btn btn-primary">Save changes</button>&nbsp;
            <button type="button" class="btn btn-default">Cancel</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public User User { get; set; }
    [Inject]
    public IUsersService UsersService { get; set; }
    private bool successStatus = false;
    private string successMessage;

    protected override void OnParametersSet()
    {
        User.Password = "PreventValidationError123456";
        User.ConfirmPassword = "PreventValidationError123456";
    }

    private async Task HandleSubmit()
    {
        successStatus = await UsersService.Edit(User);

        successMessage = "Changes saved successfully.";
    }
}
