@page "/admin/cars"
@using ClientUI.Services.Cars
@using Syncfusion.Blazor.Grids

<MudText Typo="Typo.h4" Class="mb-4">
    <b>Cars</b>
</MudText>

<MudGrid Class="pb-6">
    @if(cars is null)
     {
         <!--If the products where not loaded yet, display some skeletons-->
        <MudItem xs="12" sm="6" md="4">
            <MudPaper  Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                <MudSkeleton SkeletonType="@SkeletonType.Rectangle" Class="mx-4" Width="54px" Height="54px"/>
                <div>
                    <MudSkeleton Width="200px"/>
                    <MudSkeleton Width="40px"/>
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudPaper  Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                <MudSkeleton SkeletonType="@SkeletonType.Rectangle" Class="mx-4" Width="54px" Height="54px"/>
                <div>
                    <MudSkeleton Width="200px"/>
                    <MudSkeleton Width="40px"/>
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudPaper  Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                <MudSkeleton SkeletonType="@SkeletonType.Rectangle" Class="mx-4" Width="54px" Height="54px"/>
                <div>
                    <MudSkeleton Width="200px"/>
                    <MudSkeleton Width="40px"/>
                </div>
            </MudPaper>
        </MudItem>
    }
    else
    {
        <MudItem xs="12" sm="6" md="4">
            <MudPaper  Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                <MudIcon Icon="@Icons.Filled.DirectionsCar" Color="Color.Primary" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Cars</MudText>
                    <MudText Typo="Typo.h5">@(cars.Count())</MudText>
                </div>
            </MudPaper>
        
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper  Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                <MudIcon Icon="@Icons.Material.Filled.CarRental" Color="Color.Success" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Available Cars</MudText>
                    <MudText Typo="Typo.h5">@(cars.Where(c => HasDriver(c.Id) == "NONE").Count())</MudText>
                </div>
            </MudPaper>
        </MudItem>
    }
</MudGrid>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@cars" AllowPaging="true" AllowSorting="true" Toolbar="@(new List<string>() { "Delete" })" TValue="CarDTO">
                <GridSelectionSettings CheckboxOnly="true" PersistSelection="true"></GridSelectionSettings>
                <GridEditSettings AllowDeleting="true"></GridEditSettings>
                 <GridEvents OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler" CommandClicked="OnCommandClicked" TValue="CarDTO"></GridEvents>
                <GridColumns>
                    <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                    <GridColumn Field=@nameof(CarDTO.Id) HeaderText="Id"></GridColumn>
                    <GridColumn Field=@nameof(CarDTO.Brand) HeaderText="Brand"></GridColumn>
                    <GridColumn Field=@nameof(CarDTO.Model) HeaderText="First Name"></GridColumn>
                    <GridColumn Field=@nameof(CarDTO.FuelType) HeaderText="Last Name" ></GridColumn>
                    <GridColumn HeaderText="Driver">
                        <Template>
                            @{
                                var car = (context as CarDTO);
                                var driverUsername = HasDriver(car.Id);
                                
                                <MudChip Color="Color.Success">@driverUsername</MudChip>
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn HeaderText="Actions" TextAlign="TextAlign.Center" Width="150">
                        <GridCommandColumns>
                            <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { IconCss="e-icons e-description", CssClass="e-flat"})" Title="Assign car"></GridCommandColumn>
                        </GridCommandColumns>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code {
    [Inject] public NavigationManager NavManager{ get; set; }

    [Inject] public IDialogService DialogService{ get; set; }

    [Inject] public ICarsService CarsService{ get; set; }

    [Inject] public IDriverService DriverService{ get; set; }

    private IEnumerable<CarDTO> cars;
    private IEnumerable<DriverDTO> drivers;

    protected override async Task OnInitializedAsync()
    {
        await LoadCars();
        await LoadDrivers();
    }

    private async Task LoadCars()
    {
        cars = await CarsService.GetAllAsync();
    }

    private async Task LoadDrivers()
    {
        drivers = await DriverService.GetDriversAsync();
    }

    private bool HasCar(DriverDTO driver, int carId)
    {
        if(driver.Car is null)
            return false;

        if (driver.Car.Id == carId)
            return true;

        return false;
    }

    private string HasDriver(int carId)
    {
        var driver = drivers.Where(d => d.Car is not null && d.Car.Id == carId).FirstOrDefault();

        return driver is null ? "NONE" : driver.Email;
    }

    public async Task ActionCompleteHandler(ActionEventArgs<CarDTO> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            await LoadCars();
            await LoadDrivers();
        }
    }

    public async Task OnCommandClicked(CommandClickEventArgs<CarDTO> args)
    {
       var parameters = new DialogParameters { ["car"] = args.RowData };

        var dialog = DialogService.Show<AssignCarDialog>("Assign Car", parameters);
        var result = await dialog.Result;
    }

     public void ActionBeginHandler(ActionEventArgs<CarDTO> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (Args.Action == "Delete")
            {
                // adding new record
            }
            else
            {
                // updating
            }
        }
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            //TODO: delete
        }
    }
}
